{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useFetch = url => {\n  _s();\n  const [data, setData] = useState([]);\n  const [error, setError] = useState(null); // Initialize as null, not an array\n  const [loading, setLoading] = useState(false); // Initialize as false, not an array\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true); // Start loading\n      try {\n        const res = await fetch(url);\n        if (!res.ok) {\n          setError('Failed to fetch'); // Set error message if response is not OK\n          setLoading(false); // End loading if fetch fails\n          return;\n        }\n        const result = await res.json(); // Parse response as JSON\n        setData(result.data); // Set data from API response\n      } catch (err) {\n        setError(err.message); // Set error message if an exception occurs\n      } finally {\n        setLoading(false); // End loading, whether successful or not\n      }\n    };\n\n    fetchData();\n  }, [url]);\n  return {\n    data,\n    error,\n    loading\n  };\n};\n_s(useFetch, \"6nhoqVvctpRRYiww7uwVz/g7/BM=\");\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","useFetch","url","data","setData","error","setError","loading","setLoading","fetchData","res","fetch","ok","result","json","err","message"],"sources":["G:/tour-management/tour-management/frontend/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useFetch = (url) => {\r\n  const [data, setData] = useState([]);\r\n  const [error, setError] = useState(null);  // Initialize as null, not an array\r\n  const [loading, setLoading] = useState(false);  // Initialize as false, not an array\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);  // Start loading\r\n      try {\r\n        const res = await fetch(url); \r\n        if (!res.ok) {\r\n          setError('Failed to fetch');  // Set error message if response is not OK\r\n          setLoading(false);  // End loading if fetch fails\r\n          return;\r\n        }\r\n        const result = await res.json();  // Parse response as JSON\r\n        setData(result.data);  // Set data from API response\r\n      } catch (err) {\r\n        setError(err.message);  // Set error message if an exception occurs\r\n      } finally {\r\n        setLoading(false);  // End loading, whether successful or not\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [url]);\r\n\r\n  return {\r\n    data,\r\n    error,\r\n    loading,\r\n  };\r\n};\r\n\r\nexport default useFetch;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,QAAQ,GAAIC,GAAG,IAAK;EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;EAC3C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAE;;EAEhDC,SAAS,CAAC,MAAM;IACd,MAAMS,SAAS,GAAG,YAAY;MAC5BD,UAAU,CAAC,IAAI,CAAC,CAAC,CAAE;MACnB,IAAI;QACF,MAAME,GAAG,GAAG,MAAMC,KAAK,CAACT,GAAG,CAAC;QAC5B,IAAI,CAACQ,GAAG,CAACE,EAAE,EAAE;UACXN,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAE;UAC9BE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAE;UACpB;QACF;QACA,MAAMK,MAAM,GAAG,MAAMH,GAAG,CAACI,IAAI,EAAE,CAAC,CAAE;QAClCV,OAAO,CAACS,MAAM,CAACV,IAAI,CAAC,CAAC,CAAE;MACzB,CAAC,CAAC,OAAOY,GAAG,EAAE;QACZT,QAAQ,CAACS,GAAG,CAACC,OAAO,CAAC,CAAC,CAAE;MAC1B,CAAC,SAAS;QACRR,UAAU,CAAC,KAAK,CAAC,CAAC,CAAE;MACtB;IACF,CAAC;;IAEDC,SAAS,EAAE;EACb,CAAC,EAAE,CAACP,GAAG,CAAC,CAAC;EAET,OAAO;IACLC,IAAI;IACJE,KAAK;IACLE;EACF,CAAC;AACH,CAAC;AAAC,GAhCIN,QAAQ;AAkCd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}